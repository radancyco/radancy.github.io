// Global Mixins 

// Fonts

@mixin declare-font-face($font-family, $font-filename, $font-weight : normal, $font-style :normal, $font-stretch : normal) {

	@font-face {
	font-family: "#{$font-family}";
	src: font-url("#{$font-filename}.eot");
	src: font-url("#{$font-filename}.eot?#iefix") format("embedded-opentype"),
	font-url("#{$font-filename}.woff") format("woff"),
	font-url("#{$font-filename}.ttf") format("truetype"),
	font-url("#{$font-filename}.svg##{$font-family}") format("svg");
	font-weight: $font-weight;
	font-style: $font-style;
	font-stretch: $font-stretch;
	}

}

// For input tag placeholders

@mixin placeholder {

  &.placeholder { @content }
  
  &:-moz-placeholder { @content }
  
  &::-webkit-input-placeholder { @content }

}

@mixin breakpoint($pixels) {

	@media screen and (min-width: $pixels) {

		@content;

	}

}

@mixin long-shadow($type, $color, $length, $fadeout: true, $skew: false, $direction: right) {

	$shadow: '';

	@if $skew == false or $type == text {

		@if $direction == right {

			@for $i from 0 to $length - 1 {

				$shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $color + ',';

			}

		}

		@if $direction == left {

			@for $i from 0 to $length - 1 {

				$shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $color + ',';

			}

		}

	}

	@if $fadeout == true {

		@for $i from 1 to $length - 1 {

			@if $type == text or $skew == false {

				@if $direction == right {

					$shadow: $shadow + $i + 'px ' + $i + 'px 0 ' +       rgba($color, 1 - $i / $length) + ',';

				}

				@if $direction == left {

					$shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' +       rgba($color, 1 - $i / $length) + ',';

				}

			}

			@if ($type == box) and $skew == true {

				@if $direction == right {

					$shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - $i / $length) + ',';

				}

				@if $direction == left {

					$shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - $i / $length) + ',';

				}

			}

		}

		$shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba($color, 0);

	}

	@if $fadeout == false{

		@if $skew == true and ( $type == box ){

			@for $i from 0 to $length - 1 {

				$shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .1 + 'px ' + $color + ',';

			}

		}

		$shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba(0,0,0,0);

	}

	$shadow: unquote($shadow);

		@if $type == 'box' {box-shadow: $shadow;}

			@if $type == 'text' {text-shadow: $shadow;}

	}

@mixin borderbox {

	-moz-box-sizing: border-box;
	box-sizing: border-box;

}

@mixin clearfix {

	&:after {
	clear: both; 
	content: "."; 
	display: block; 
	height: 0; 
	visibility: hidden;
	}

}

// Used to accessibly hide elements (display: none may cause issues with screen readers)
// Use instead of applying wai to elelemnts

@mixin wai {

	position: absolute;
	top: 0;
	left: 0;
	width: 0;
	height: 0;
	text-indent: $text-offscreen;

}

// Instead of adding a ton of properties to reset elements, just call what you need

@mixin reset($margin: null, $padding: null, $list-style: null, $border: null, $background-color: null, $background-image: null) {

	@if ($margin) {
        
        margin: 0;
    
    }

    @if ($padding) {
        
        pading: 0;
    
    } 

    @if ($list-style) {
        
        list-style: none;
    
    } 

    @if ($border) {
        
        border: 0;
    
    } 

    @if ($background-color) {
        
        background-color: transparent;
    
    } 

    @if ($background-image) {
        
        background-image: none;
    
    } 

}

// Keyframes

@mixin keyframes($name) {

	@-webkit-keyframes #{$name} {

		@content; 

	}

	@-moz-keyframes #{$name} {

		@content;

	}

	@-ms-keyframes #{$name} {

		@content;

	}

	@keyframes #{$name} {

		@content;

	} 

}

// Animation shorthand

@mixin animation($value) {

	-webkit-animation: ($value);
	-ms-animation: ($value);
	-moz-animation: ($value);
	-animation: ($value);

}
